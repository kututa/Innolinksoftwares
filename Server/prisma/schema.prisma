

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// Enums for fields with limited values

enum UserRole {
  user
  admin
}

enum AccountStatus {
  active
  pending
  suspended
}

enum OrderStatus {
  pending
  processing
  completed
  cancelled
}

enum OrderProgressStatus {
  pending
  processing
  cancelled
}

enum PaymentMethod {
  card
  paypal
  bank_transfer
  crypto
}

enum PaymentStatus {
  pending
  completed
  failed
}

enum SupportTicketPriority {
  high
  medium
  low
}

enum SupportTicketStatus {
  open
  in_progress
  resolved
  closed
}

enum NotificationType {
  order_update
  payment
  support
  system
}

enum NotificationStatus {
  unread
  read
}

/// Models

model User {
  id              Int              @id @default(autoincrement())
  fullName        String           @map("full_name")
  email           String           @unique
  password        String           @map("password")
  phone           String?          @map("phone")
  role            UserRole         @default(user)
  icon            String?
  accountStatus   AccountStatus    @default(pending) @map("account_status")
  createdAt       DateTime         @default(now()) @map("created_at")

  // Relations
  activityLogs    UserActivity[]
  orders          Order[]
  payments        Payment[]
  supportTickets  SupportTicket[]
  supportResponses SupportResponse[]
  notifications   Notification[]
  systemLogs      SystemLog[]      @relation("AdminLogs")
  
}

model UserActivity {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  timestamp DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}

model Service {
  id          Int       @id @default(autoincrement())
  name        String
  category    String?
  image       String?
  description String?
  price       Decimal
  isActive    Boolean   @default(true)
 
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")

  orders      Order[]   // Orders associated with this service
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  serviceId   Int      
  orderNumber String      @unique @map("order_number")
  status      OrderStatus @default(pending)
  totalAmount Decimal     @map("total_amount")  
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @default(now()) @updatedAt @map("updated_at")


  user        User        @relation(fields: [userId], references: [id])
  service     Service     @relation(fields: [serviceId], references: [id])
  progress    OrderProgress[]
  payments    Payment[]
}

model OrderProgress {
  id        Int                @id @default(autoincrement())
  orderId   Int
  status    OrderProgressStatus
  updatedAt DateTime           @default(now()) @updatedAt @map("updated_at")

  order     Order              @relation(fields: [orderId], references: [id])
}

model Payment {
  id            Int           @id @default(autoincrement())
  userId        Int
  orderId       Int
  transactionId String        @unique @map("transaction_id")
  paymentMethod PaymentMethod
  status        PaymentStatus @default(pending)
  amount        Decimal
  createdAt     DateTime      @default(now()) @map("created_at")

  user          User          @relation(fields: [userId], references: [id])
  order         Order         @relation(fields: [orderId], references: [id])
}

model SupportTicket {
  id          Int                    @id @default(autoincrement())
  userId      Int
  subject     String
  description String
  priority    SupportTicketPriority  @default(medium)
  status      SupportTicketStatus    @default(open)
  createdAt   DateTime               @default(now()) @map("created_at")

  user        User                   @relation(fields: [userId], references: [id])
  responses   SupportResponse[]
 
}

model SupportResponse {
  id        Int         @id @default(autoincrement())
  ticketId  Int
  userId    Int
  message   String
  createdAt DateTime    @default(now()) @map("created_at")

  ticket    SupportTicket @relation(fields: [ticketId], references: [id])
  user      User          @relation(fields: [userId], references: [id])
}

model Notification {
  id        Int                 @id @default(autoincrement())
  userId    Int?                // Null if it's a system-wide notification
  message   String
  type      NotificationType
  status    NotificationStatus  @default(unread)
  createdAt DateTime            @default(now()) @map("created_at")

  user      User?               @relation(fields: [userId], references: [id])
}

model Resource {
  id          Int       @id @default(autoincrement())
  title       String
  fileUrl     String    @map("file_url")
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
}

model SystemLog {
  id        Int      @id @default(autoincrement())
  adminId   Int
  action    String
  timestamp DateTime @default(now())

  admin     User     @relation("AdminLogs", fields: [adminId], references: [id])
}